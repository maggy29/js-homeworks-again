"use strict";
//–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ prompt –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞
// –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ –Ω–∞–∂–º–µ—Ç Cancel –∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –æ–±—â–µ–π
// —Å—É–º–º–µ.

//–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤ prompt –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –í–≤–æ–¥
//–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π total.
//–û–ø–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç
//–∫–Ω–æ–ø–∫—É Cancel –≤ prompt.
//–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –≤–≤–æ–¥ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É Cancel, –ø–æ–∫–∞–∑–∞—Ç—å alert
// —Å–æ —Å—Ç—Ä–æ–∫–æ–π '–û–±—â–∞—è —Å—É–º–º–∞ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞ [—Å—É–º–º–∞]'.
//üîî –î–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ, –∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã
//–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –Ω—É–∂–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞,
//–ø–æ–∫–∞–∑—ã–≤–∞–π alert —Å —Ç–µ–∫—Å—Ç–æ–º '–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', –ø—Ä–∏
//—ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç prompt –ø–ª—é—Å–æ–≤–∞—Ç—å –∫ –æ–±—â–µ–π —Å—É–º–º–µ –Ω–µ –Ω—É–∂–Ω–æ, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–Ω–æ–≤–∞
//–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ prompt.

// let input;
// let total = 0;
// const reg = new RegExp("^[0-9]+$");

// while (input !== null) {
//   input = prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
//   if (reg.test(input)) {
//     total += Number(input);
//   }
// }
// alert(`–û–±—â–∞—è —Å—É–º–º–∞ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞ ${total}`);

Array.prototype.customReduce = function (callback, initValue = Array[0]) {
  let accumulator = initValue;

  for (let i = 0; i < this.length; i += 1) {
    accumulator = callback(accumulator, this[i], i, this);
  }
  return accumulator;
};

const numbers = [1, 2, 3, 4, 5];
console.log(numbers.customReduce((acc, num) => (acc += num), 0));

Array.prototype.customMap = function (callback) {
  const mapResult = [];
  for (let i = 0; i < this.length; i += 1) {
    mapResult.push(callback(this[i], i, this));
  }
  return mapResult;
};

console.log(numbers.customMap((num) => num * num));
console.log(numbers.map((num) => num * num));

Array.prototype.customFilter = function (callback) {
  const filterResult = [];
  for (let i = 0; i < this.length; i += 1) {
    if (callback(this[i], i, this)) {
      filterResult.push(this[i]);
    }
  }
  return filterResult;
};

console.log(numbers.customFilter((num) => num > 3));
console.log(numbers.filter((num) => num > 3));

Array.prototype.customFind = function (callback) {
  for (let i = 0; i < this.length; i += 1) {
    if (callback(this[i], i, this)) {
      return this[i];
    }
  }
  return undefined;
};

console.log(numbers.customFind((num) => num === 3));
console.log(numbers.find((num) => num === 3));

Array.prototype.customEvery = function (callback) {
  for (let i = 0; i < this.length; i += 1) {
    if (callback(this[i], i, this)) {
      continue;
    } else {
      return false;
    }
  }
  return true;
};

console.log(numbers.customEvery((num) => num % 2 === 0));
console.log(numbers.every((num) => num % 2 === 0));
console.log([2, 4, 6, 8].customEvery((num) => num % 2 === 0));
console.log([2, 4, 6, 8].every((num) => num % 2 === 0));

Array.prototype.customSome = function (callback) {
  for (let i = 0; i < this.length; i += 1) {
    if (callback(this[i], i, this)) {
      return true;
    } else {
      continue;
    }
  }
  return false;
};

console.log(numbers.customSome((num) => num % 2 === 0));
console.log(numbers.some((num) => num % 2 === 0));
console.log([2, 4, 6, 8].customSome((num) => num % 2 === 1));
console.log([2, 4, 6, 8].some((num) => num % 2 === 1));
